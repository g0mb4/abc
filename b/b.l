%{  /* user defined code needed for the rules */

#include <stdlib.h>
#include "b.tab.h"   /* generated by bison for the return values */

extern void yyerror(const char * s, ...);
char *strdupquotes(const char * s);

%} /* end of the user defined code */

/* use line numbers */
%option yylineno
/* don't generate input() */
%option noinput
/* don't generate yyunput() */
%option nounput

ALPHA   [A-Za-z_]
DIGIT   [0-9]

NAME    {ALPHA}+
NUM     [-+]?{DIGIT}+

%%  /* start of the rules */

\"(\\.|[^"\\])*\"       { yylval.s = strdupquotes(yytext); return str; }
{NUM}                   { yylval.i = atoi(yytext); return number; }

 /* "auto"          { return T_AUTO; } */
"extrn"         { return extrn; }
 /* "if"            { return T_IF; } */
 /* "while"         { return T_WHILE; } */
 /* "switch"        { return T_SWITCH; } */
 /* "case"          { return T_CASE; } */
 /* "goto"          { return T_GOTO; } */
 /* "return"        { return T_RETURN; } */

{NAME}          { yylval.s = strdup(yytext); return name; }
\(              { return '('; }
\)              { return ')'; }
\{              { return '{'; }
\}              { return '}'; }

;               { return ';'; }
,               { return ','; }

\n              { } /* update yylineno */
[ \t\r]+        { ; } /* ignore whitespace */
.               { yyerror("unrecognized input: %s", yytext); }
%%  /* end of the rules */

/* for the compiler */
int yywrap(void)
{
    return 1;
}

char *strdupquotes(const char * s)
{
    int i, j = 0, len;
    char *d;

    len = strlen(s);

    if (len <= 2){
            return NULL;
    }

    d = malloc(len - 1);   /* lenght - 2 quotes + 1 terminator */
    if (d == NULL)
            return NULL;

    for (i = 1; i < (len - 1); i++){
            d[j++] = s[i];
    }
    d[j] = '\0';

    return d;
}
